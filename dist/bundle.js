!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r,s=this&&this.__decorate||function(e,t,n,r){var s,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,n,o):s(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};!function(e){class t extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new t),this.instance}addProject(t,n,r){const s=new e.Project(Math.random().toString(),t,n,r,e.ProjectStatus.Active);this.projects.push(s),this.updateListeners()}moveProject(e,t){const n=this.projects.find(t=>t.id===e);n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const n=t.getInstance();function r(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}function i(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}class o{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class l extends o{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 person":this.project.people+" persons"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("DragEnd")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}s([i],l.prototype,"dragStartHandler",null);class a extends o{constructor(e){super("project-list","app",!1,e+"-projects"),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){if(e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]){e.preventDefault();this.element.querySelector("ul").classList.add("droppable")}}dropHandler(t){const r=t.dataTransfer.getData("text/plain");n.moveProject(r,"active"===this.type?e.ProjectStatus.Active:e.ProjectStatus.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),n.addListener(t=>{const n=t.filter(t=>"active"===this.type?t.status===e.ProjectStatus.Active:t.status===e.ProjectStatus.Finished);this.assignedProjects=n,this.renderProjects()})}renderContent(){const e=this.type+"-projects-list";this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(this.type+"-projects-list").innerHTML="";for(const e of this.assignedProjects)new l(this.element.querySelector("ul").id,e)}}s([i],a.prototype,"dragOverHandler",null),s([i],a.prototype,"dropHandler",null),s([i],a.prototype,"dragLeaveHandler",null);class u extends o{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=this.peopleInputElement.value,s={value:t,required:!0,minLength:5},i={value:+n,required:!0,min:1,max:5};return r({value:e,required:!0})&&r(s)&&r(i)?[e,t,+n]:void alert("Invalid input, please try again!")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,r,s]=t;n.addProject(e,r,s),this.clearInputs()}}}s([i],u.prototype,"submitHandler",null);new u,new a("active"),new a("finished")}(r||(r={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkFwcCIsIl9fZGVjb3JhdGUiLCJ0aGlzIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImRlc2MiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJQcm9qZWN0U3RhdGUiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lckZuIiwicHVzaCIsInN1cGVyIiwicHJvamVjdHMiLCJpbnN0YW5jZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJudW1PZlBlb3BsZSIsIm5ld1Byb2plY3QiLCJQcm9qZWN0IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwiUHJvamVjdFN0YXR1cyIsIkFjdGl2ZSIsInVwZGF0ZUxpc3RlbmVycyIsInByb2plY3RJZCIsIm5ld1N0YXR1cyIsInByb2plY3QiLCJmaW5kIiwicHJqIiwiaWQiLCJzdGF0dXMiLCJzbGljZSIsInByb2plY3RTdGF0ZSIsImdldEluc3RhbmNlIiwidmFsaWRhdGUiLCJ2YWxpZGF0YWJsZUlucHV0IiwiaXNWYWxpZCIsInJlcXVpcmVkIiwidHJpbSIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsImF1dG9iaW5kIiwiXyIsIl8yIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiY29uZmlndXJhYmxlIiwiQ29tcG9uZW50IiwidGVtcGxhdGVJZCIsImhvc3RFbGVtZW50SWQiLCJpbnNlcnRBdFN0YXJ0IiwibmV3RWxlbWVudElkIiwidGVtcGxhdGVFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImhvc3RFbGVtZW50IiwiaW1wb3J0ZWROb2RlIiwiaW1wb3J0Tm9kZSIsImNvbnRlbnQiLCJlbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJhdHRhY2giLCJpbnNlcnRBdEJlZ2lubmluZyIsImluc2VydEFkamFjZW50RWxlbWVudCIsIlByb2plY3RJdGVtIiwiaG9zdElkIiwiY29uZmlndXJlIiwicmVuZGVyQ29udGVudCIsInBlb3BsZSIsImV2ZW50IiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImVmZmVjdEFsbG93ZWQiLCJjb25zb2xlIiwibG9nIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRyYWdTdGFydEhhbmRsZXIiLCJkcmFnRW5kSGFuZGxlciIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsInBlcnNvbnMiLCJQcm9qZWN0TGlzdCIsInR5cGUiLCJhc3NpZ25lZFByb2plY3RzIiwidHlwZXMiLCJwcmV2ZW50RGVmYXVsdCIsImNsYXNzTGlzdCIsImFkZCIsInByaklkIiwiZ2V0RGF0YSIsIm1vdmVQcm9qZWN0IiwiRmluaXNoZWQiLCJyZW1vdmUiLCJkcmFnT3ZlckhhbmRsZXIiLCJkcmFnTGVhdmVIYW5kbGVyIiwiZHJvcEhhbmRsZXIiLCJhZGRMaXN0ZW5lciIsInJlbGV2YW50UHJvamVjdHMiLCJmaWx0ZXIiLCJyZW5kZXJQcm9qZWN0cyIsImxpc3RJZCIsInRvVXBwZXJDYXNlIiwiaW5uZXJIVE1MIiwicHJqSXRlbSIsIlByb2plY3RJbnB1dCIsInRpdGxlSW5wdXRFbGVtZW50IiwiZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQiLCJwZW9wbGVJbnB1dEVsZW1lbnQiLCJzdWJtaXRIYW5kbGVyIiwiZW50ZXJlZFRpdGxlIiwiZW50ZXJlZERlc2NyaXB0aW9uIiwiZW50ZXJlZFBlb3BsZSIsImRlc2NyaXB0aW9uVmFsaWRhdGFibGUiLCJwZW9wbGVWYWxpZGF0YWJsZSIsImFsZXJ0IiwidXNlcklucHV0IiwiZ2F0aGVyVXNlcklucHV0IiwiQXJyYXkiLCJpc0FycmF5IiwiYWRkUHJvamVjdCIsImNsZWFySW5wdXRzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIs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aUJBQWlCLFNBQVVoRixLQUFLaUgsZUFFakQsaUJBQ0Esa0JBQ0ksTUFBTUMsRUFBZWxILEtBQUs4RyxrQkFBa0IvSCxNQUN0Q29JLEVBQXFCbkgsS0FBSytHLHdCQUF3QmhJLE1BQ2xEcUksRUFBZ0JwSCxLQUFLZ0gsbUJBQW1CakksTUFLeENzSSxFQUF5QixDQUMzQnRJLE1BQU9vSSxFQUNQM0UsVUFBVSxFQUNWRSxVQUFXLEdBRVQ0RSxFQUFvQixDQUN0QnZJLE9BQVFxSSxFQUNSNUUsVUFBVSxFQUNWSSxJQUFLLEVBQ0xDLElBQUssR0FFVCxPQUFLUixFQWZvQixDQUNyQnRELE1BQU9tSSxFQUNQMUUsVUFBVSxLQWNUSCxFQUFTZ0YsSUFDVGhGLEVBQVNpRixHQUtILENBQUNKLEVBQWNDLEdBQXFCQyxRQUozQ0csTUFBTSxvQ0FPZCxjQUNJdkgsS0FBSzhHLGtCQUFrQi9ILE1BQVEsR0FDL0JpQixLQUFLK0csd0JBQXdCaEksTUFBUSxHQUNyQ2lCLEtBQUtnSCxtQkFBbUJqSSxNQUFRLEdBRXBDLGNBQWMyRixHQUNWQSxFQUFNZ0IsaUJBQ04sTUFBTThCLEVBQVl4SCxLQUFLeUgsa0JBQ3ZCLEdBQUlDLE1BQU1DLFFBQVFILEdBQVksQ0FDMUIsTUFBT3hHLEVBQU9iLEVBQU1zRSxHQUFVK0MsRUFDOUJyRixFQUFheUYsV0FBVzVHLEVBQU9iLEVBQU1zRSxHQUNyQ3pFLEtBQUs2SCxnQkFJakI5SCxFQUFXLENBQ1ArQyxHQUNEK0QsRUFBYW5ILFVBQVcsZ0JBQWlCLE1BQzNCLElBQUltSCxFQUNDLElBQUl2QixFQUFZLFVBQ2QsSUFBSUEsRUFBWSxZQS9QNUMsQ0FnUUd4RixJQUFRQSxFQUFNIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4vLy88cmVmZXJlbmNlIHBhdGg9XCIuL2RyYWdhYmxlLWludGVyZmFjZXMudHNcIi8+XHJcbi8vLzxyZWZlcmVuY2UgcGF0aD1cIi4vbW9kZWwudHNcIi8+XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbnZhciBBcHA7XHJcbihmdW5jdGlvbiAoQXBwKSB7XHJcbiAgICBjbGFzcyBTdGF0ZSB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyRm4pIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lckZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjbGFzcyBQcm9qZWN0U3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvamVjdHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBQcm9qZWN0U3RhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZFByb2plY3QodGl0bGUsIGRlc2NyaXB0aW9uLCBudW1PZlBlb3BsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IEFwcC5Qcm9qZWN0KE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKSwgdGl0bGUsIGRlc2NyaXB0aW9uLCBudW1PZlBlb3BsZSwgQXBwLlByb2plY3RTdGF0dXMuQWN0aXZlKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ld1Byb2plY3QpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb3ZlUHJvamVjdChwcm9qZWN0SWQsIG5ld1N0YXR1cykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0cy5maW5kKChwcmopID0+IHByai5pZCA9PT0gcHJvamVjdElkKTtcclxuICAgICAgICAgICAgaWYgKHByb2plY3QgJiYgcHJvamVjdC5zdGF0dXMgIT09IG5ld1N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdC5zdGF0dXMgPSBuZXdTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZUxpc3RlbmVycygpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lckZuIG9mIHRoaXMubGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lckZuKHRoaXMucHJvamVjdHMuc2xpY2UoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9qZWN0U3RhdGUgPSBQcm9qZWN0U3RhdGUuZ2V0SW5zdGFuY2UoKTtcclxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHZhbGlkYXRhYmxlSW5wdXQpIHtcclxuICAgICAgICBsZXQgaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHZhbGlkYXRhYmxlSW5wdXQucmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgaXNWYWxpZCA9XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoICE9PSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsaWRhdGFibGVJbnB1dC5taW5MZW5ndGggIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpc1ZhbGlkID1cclxuICAgICAgICAgICAgICAgIGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZS5sZW5ndGggPj0gdmFsaWRhdGFibGVJbnB1dC5taW5MZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWxpZGF0YWJsZUlucHV0Lm1heExlbmd0aCAhPSBudWxsICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlzVmFsaWQgPVxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlLmxlbmd0aCA8PSB2YWxpZGF0YWJsZUlucHV0Lm1heExlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbGlkYXRhYmxlSW5wdXQubWluICE9IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA+PSB2YWxpZGF0YWJsZUlucHV0Lm1pbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbGlkYXRhYmxlSW5wdXQubWF4ICE9IG51bGwgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA8PSB2YWxpZGF0YWJsZUlucHV0Lm1heDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICB9XHJcbiAgICAvLyBhdXRvYmluZCBkZWNvcmF0b3JcclxuICAgIGZ1bmN0aW9uIGF1dG9iaW5kKF8sIF8yLCBkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGFkakRlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRGbiA9IG9yaWdpbmFsTWV0aG9kLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRGbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBhZGpEZXNjcmlwdG9yO1xyXG4gICAgfVxyXG4gICAgLy8gQ29tcG9uZW50IEJhc2UgQ2xhc3NcclxuICAgIGNsYXNzIENvbXBvbmVudCB7XHJcbiAgICAgICAgY29uc3RydWN0b3IodGVtcGxhdGVJZCwgaG9zdEVsZW1lbnRJZCwgaW5zZXJ0QXRTdGFydCwgbmV3RWxlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGVJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChob3N0RWxlbWVudElkKTtcclxuICAgICAgICAgICAgY29uc3QgaW1wb3J0ZWROb2RlID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlRWxlbWVudC5jb250ZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gaW1wb3J0ZWROb2RlLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgICAgICBpZiAobmV3RWxlbWVudElkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuaWQgPSBuZXdFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hdHRhY2goaW5zZXJ0QXRTdGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF0dGFjaChpbnNlcnRBdEJlZ2lubmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3RFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChpbnNlcnRBdEJlZ2lubmluZyA/IFwiYWZ0ZXJiZWdpblwiIDogXCJiZWZvcmVlbmRcIiwgdGhpcy5lbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBQcm9qZWN0SXRlbSBDbGFzc1xyXG4gICAgY2xhc3MgUHJvamVjdEl0ZW0gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGhvc3RJZCwgcHJvamVjdCkge1xyXG4gICAgICAgICAgICBzdXBlcihcInNpbmdsZS1wcm9qZWN0XCIsIGhvc3RJZCwgZmFsc2UsIHByb2plY3QuaWQpO1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2V0IHBlcnNvbnMoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2plY3QucGVvcGxlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIxIHBlcnNvblwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMucHJvamVjdC5wZW9wbGV9IHBlcnNvbnNgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyYWdTdGFydEhhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRoaXMucHJvamVjdC5pZCk7XHJcbiAgICAgICAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gXCJtb3ZlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyYWdFbmRIYW5kbGVyKF8pIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJEcmFnRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25maWd1cmUoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIHRoaXMuZHJhZ1N0YXJ0SGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLCB0aGlzLmRyYWdFbmRIYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVyQ29udGVudCgpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMlwiKS50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC50aXRsZTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoM1wiKS50ZXh0Q29udGVudCA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlcnNvbnMgKyBcIiBhc3NpZ25lZFwiO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInBcIikudGV4dENvbnRlbnQgPSB0aGlzLnByb2plY3QuZGVzY3JpcHRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYXV0b2JpbmRcclxuICAgIF0sIFByb2plY3RJdGVtLnByb3RvdHlwZSwgXCJkcmFnU3RhcnRIYW5kbGVyXCIsIG51bGwpO1xyXG4gICAgLy8gUHJvamVjdExpc3QgQ2xhc3NcclxuICAgIGNsYXNzIFByb2plY3RMaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgICAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKFwicHJvamVjdC1saXN0XCIsIFwiYXBwXCIsIGZhbHNlLCBgJHt0eXBlfS1wcm9qZWN0c2ApO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICB0aGlzLmFzc2lnbmVkUHJvamVjdHMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyYWdPdmVySGFuZGxlcihldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyICYmIGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0RWwgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpO1xyXG4gICAgICAgICAgICAgICAgbGlzdEVsLmNsYXNzTGlzdC5hZGQoXCJkcm9wcGFibGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZHJvcEhhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJqSWQgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHQvcGxhaW5cIik7XHJcbiAgICAgICAgICAgIHByb2plY3RTdGF0ZS5tb3ZlUHJvamVjdChwcmpJZCwgdGhpcy50eXBlID09PSBcImFjdGl2ZVwiID8gQXBwLlByb2plY3RTdGF0dXMuQWN0aXZlIDogQXBwLlByb2plY3RTdGF0dXMuRmluaXNoZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcmFnTGVhdmVIYW5kbGVyKF8pIHtcclxuICAgICAgICAgICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ1bFwiKTtcclxuICAgICAgICAgICAgbGlzdEVsLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wcGFibGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbmZpZ3VyZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCB0aGlzLmRyYWdPdmVySGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIHRoaXMuZHJhZ0xlYXZlSGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCB0aGlzLmRyb3BIYW5kbGVyKTtcclxuICAgICAgICAgICAgcHJvamVjdFN0YXRlLmFkZExpc3RlbmVyKChwcm9qZWN0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVsZXZhbnRQcm9qZWN0cyA9IHByb2plY3RzLmZpbHRlcigocHJqKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJhY3RpdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJqLnN0YXR1cyA9PT0gQXBwLlByb2plY3RTdGF0dXMuQWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJqLnN0YXR1cyA9PT0gQXBwLlByb2plY3RTdGF0dXMuRmluaXNoZWQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0cyA9IHJlbGV2YW50UHJvamVjdHM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclByb2plY3RzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXJDb250ZW50KCkge1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0SWQgPSBgJHt0aGlzLnR5cGV9LXByb2plY3RzLWxpc3RgO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpLmlkID0gbGlzdElkO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcImgyXCIpLnRleHRDb250ZW50ID1cclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZS50b1VwcGVyQ2FzZSgpICsgXCIgUFJPSkVDVFNcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVyUHJvamVjdHMoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3RFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3RoaXMudHlwZX0tcHJvamVjdHMtbGlzdGApO1xyXG4gICAgICAgICAgICBsaXN0RWwuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwcmpJdGVtIG9mIHRoaXMuYXNzaWduZWRQcm9qZWN0cykge1xyXG4gICAgICAgICAgICAgICAgbmV3IFByb2plY3RJdGVtKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwidWxcIikuaWQsIHByakl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYXV0b2JpbmRcclxuICAgIF0sIFByb2plY3RMaXN0LnByb3RvdHlwZSwgXCJkcmFnT3ZlckhhbmRsZXJcIiwgbnVsbCk7XHJcbiAgICBfX2RlY29yYXRlKFtcclxuICAgICAgICBhdXRvYmluZFxyXG4gICAgXSwgUHJvamVjdExpc3QucHJvdG90eXBlLCBcImRyb3BIYW5kbGVyXCIsIG51bGwpO1xyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYXV0b2JpbmRcclxuICAgIF0sIFByb2plY3RMaXN0LnByb3RvdHlwZSwgXCJkcmFnTGVhdmVIYW5kbGVyXCIsIG51bGwpO1xyXG4gICAgLy8gUHJvamVjdElucHV0IENsYXNzXHJcbiAgICBjbGFzcyBQcm9qZWN0SW5wdXQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcihcInByb2plY3QtaW5wdXRcIiwgXCJhcHBcIiwgdHJ1ZSwgXCJ1c2VyLWlucHV0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLnRpdGxlSW5wdXRFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGl0bGVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZXNjcmlwdGlvblwiKTtcclxuICAgICAgICAgICAgdGhpcy5wZW9wbGVJbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNwZW9wbGVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbmZpZ3VyZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5zdWJtaXRIYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVyQ29udGVudCgpIHsgfVxyXG4gICAgICAgIGdhdGhlclVzZXJJbnB1dCgpIHtcclxuICAgICAgICAgICAgY29uc3QgZW50ZXJlZFRpdGxlID0gdGhpcy50aXRsZUlucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZW50ZXJlZERlc2NyaXB0aW9uID0gdGhpcy5kZXNjcmlwdGlvbklucHV0RWxlbWVudC52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZW50ZXJlZFBlb3BsZSA9IHRoaXMucGVvcGxlSW5wdXRFbGVtZW50LnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCB0aXRsZVZhbGlkYXRhYmxlID0ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGVudGVyZWRUaXRsZSxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvblZhbGlkYXRhYmxlID0ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGVudGVyZWREZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWluTGVuZ3RoOiA1LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBwZW9wbGVWYWxpZGF0YWJsZSA9IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiArZW50ZXJlZFBlb3BsZSxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbWluOiAxLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA1LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRlKHRpdGxlVmFsaWRhdGFibGUpIHx8XHJcbiAgICAgICAgICAgICAgICAhdmFsaWRhdGUoZGVzY3JpcHRpb25WYWxpZGF0YWJsZSkgfHxcclxuICAgICAgICAgICAgICAgICF2YWxpZGF0ZShwZW9wbGVWYWxpZGF0YWJsZSkpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW52YWxpZCBpbnB1dCwgcGxlYXNlIHRyeSBhZ2FpbiFcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2VudGVyZWRUaXRsZSwgZW50ZXJlZERlc2NyaXB0aW9uLCArZW50ZXJlZFBlb3BsZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2xlYXJJbnB1dHMoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uSW5wdXRFbGVtZW50LnZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5wZW9wbGVJbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdWJtaXRIYW5kbGVyKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IHRoaXMuZ2F0aGVyVXNlcklucHV0KCk7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnB1dCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFt0aXRsZSwgZGVzYywgcGVvcGxlXSA9IHVzZXJJbnB1dDtcclxuICAgICAgICAgICAgICAgIHByb2plY3RTdGF0ZS5hZGRQcm9qZWN0KHRpdGxlLCBkZXNjLCBwZW9wbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcklucHV0cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX19kZWNvcmF0ZShbXHJcbiAgICAgICAgYXV0b2JpbmRcclxuICAgIF0sIFByb2plY3RJbnB1dC5wcm90b3R5cGUsIFwic3VibWl0SGFuZGxlclwiLCBudWxsKTtcclxuICAgIGNvbnN0IHByaklucHV0ID0gbmV3IFByb2plY3RJbnB1dCgpO1xyXG4gICAgY29uc3QgYWN0aXZlUHJqTGlzdCA9IG5ldyBQcm9qZWN0TGlzdChcImFjdGl2ZVwiKTtcclxuICAgIGNvbnN0IGZpbmlzaGVkUHJqTGlzdCA9IG5ldyBQcm9qZWN0TGlzdChcImZpbmlzaGVkXCIpO1xyXG59KShBcHAgfHwgKEFwcCA9IHt9KSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=